{
  "version": "v1",
  "project_name": "PHP Self-Contained File Handler (Mobile-First)",
  "project_goal": "To develop a secure, dependency-free PHP file uploader and downloader optimized for mobile devices and progressively enhanced for desktop. The application will run in an intranet environment and feature an interactive, responsive UI with image previews and dynamic status indicators, styled with a self-contained, mobile-first utility CSS file.",
  "tech_stack": [
    "PHP 8+",
    "Vanilla JavaScript (ES6+)",
    "HTML5",
    "CSS3"
  ],
  "environment_constraints": "Must run within a Laragon WAMP stack on a private intranet with no external network dependencies for libraries or frameworks.",
  "file_structure": [
    { "type": "directory", "path": "./", "name": "file-handler" },
    { "type": "file", "path": "./file-handler/", "name": "index.php" },
    { "type": "file", "path": "./file-handler/", "name": "style.css" },
    { "type": "file", "path": "./file-handler/", "name": "app.js" },
    { "type": "file", "path": "./file-handler/", "name": "uploader.php" },
    { "type": "file", "path": "./file-handler/", "name": "downloader.php" },
    { "type": "directory", "path": "./file-handler/", "name": "uploads" },
    { "type": "file", "path": "./file-handler/uploads/", "name": ".htaccess" }
  ],
  "implementation_plan": [
    {
      "phase": 1,
      "phase_name": "Mobile-First Frontend Structure and Styling",
      "tasks": [
        {
          "task_id": "FE-01-MF",
          "task_name": "Create Responsive HTML5 Boilerplate",
          "target_file": "/file-handler/index.php",
          "description": "Build the complete static HTML structure, optimized for mobile rendering and designed for progressive enhancement.",
          "specifications": [
            "Use a standard HTML5 document structure.",
            "Crucially, include the viewport meta tag in the <head>: `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">`",
            "Link to 'style.css' in the <head>.",
            "Link to 'app.js' with the `defer` attribute before the closing `</body>` tag.",
            "The `<body>` tag should have classes `bg-gray-100 p-4 md:flex md:items-center md:justify-center md:p-0` to provide simple padding on mobile and flexbox centering only on medium screens and up.",
            "Create a main container div with id `app-container` and classes `w-full max-w-2xl` for responsive width.",
            "Inside `app-container`, create an `upload-container` div with classes `bg-white rounded-lg shadow-md p-6 md:p-8` for responsive padding.",
            "The `drop-zone` must contain instructional text, a `browse-btn`, and a hidden `file-input`.",
            "The `preview-container` must stack elements vertically on mobile by default. A responsive class `md:flex-row` could be used to place image and text side-by-side on larger screens.",
            "The `download-container` should naturally stack vertically, suitable for all screen sizes.",
            "Incorporate a PHP include: `<?php include 'listFiles.php'; ?>`"
          ]
        },
        {
          "task_id": "FE-02-MF",
          "task_name": "Implement Mobile-First Utility CSS",
          "target_file": "/file-handler/style.css",
          "description": "Create utility CSS classes with a mobile-first architecture. Base styles apply to all viewports, and `min-width` media queries add styles for larger screens.",
          "specifications": [
            "Implement a soft CSS reset as the base.",
            "Define Default (Mobile) Styles: These are the core classes without any prefix. Examples: `.w-full`, `.p-4` (for smaller padding on mobile), `.p-6`, `.text-lg`, `.flex-col`.",
            "Establish Responsive Breakpoints via `min-width` media queries. Use common device sizes: `md: 768px` (for tablets and up) and `lg: 1024px` (for desktops).",
            "Implement Responsive Class Naming Convention: use escaped colons `md\\:` and `lg\\:` as prefixes. The file should be structured with media queries wrapping the prefixed classes:",
            "  - `/* Mobile-first base styles */ .p-4 { padding: 1rem; }`",
            "  - `/* Medium screens and up */ @media (min-width: 768px) { .md\\:p-8 { padding: 2rem; } .md\\:flex { display: flex; } }`",
            "Define Specific Responsive Utilities:",
            "  - Sizing: `.w-full` (default), `.max-w-2xl` (for larger screens to constrain the container).",
            "  - Padding: `.p-4`, `.p-6` (mobile defaults), `.md\\:p-8`, `.lg\\:p-10` (larger padding for more space on desktop).",
            "  - Layout: `body` should have base class `.p-4` and responsive classes `.md\\:flex`, `.md\\:items-center`, `.md\\:justify-center` added to change its layout behavior on larger screens.",
            "  - Typography should be responsive: base font sizes can be overridden for larger screens, e.g. `.text-xl` and `lg\\:text-2xl`.",
            "Animation classes (`.shake-animation`, `.pulse-animation`) should be defined globally as they are not screen-size dependent."
          ]
        }
      ]
    },
    {
      "phase": 2,
      "phase_name": "Client-Side Application Logic",
      "tasks": [
        {
          "task_id": "JS-01",
          "task_name": "Develop Interactive UI Logic",
          "target_file": "/file-handler/app.js",
          "description": "JavaScript logic is screen-size agnostic and requires no core changes. It will focus on DOM manipulation, file handling and API communication.",
          "specifications": [
            "Wrap all code in an IIFE.",
            "Define constants for all necessary DOM elements.",
            "Implement event listeners for `click`, `drag-and-drop`, and file input `change`.",
            "The `handleFileSelect(file)` function will validate the file, use `FileReader` for image previews, and trigger the upload process.",
            "The `uploadFile(file)` function will use `FormData` and the `fetch` API to POST the file to `uploader.php`. Add a `.catch()` for network failures.",
            "The `updateUI(status, message)` function will dynamically show the status indicator element, applying the correct styles and animation based on the server response.",
            "A `resetUI()` function, called via `setTimeout`, will clear the UI after an upload attempt, preparing it for the next file."
            
          ]
        }
      ]
    },
    {
      "phase": 3,
      "phase_name": "Backend Upload Handler (Unchanged)",
      "tasks": [
        {
          "task_id": "BE-01",
          "task_name": "Create Secure File Upload Endpoint",
          "target_file": "/file-handler/uploader.php",
          "specifications": [
            "Set response header to `Content-Type: application/json`.",
            "Define configurations for upload directory, allowed MIME types, and max file size.",
            "Sequentially validate the request: check for file existence, PHP upload errors, file size, and the true MIME type using `finfo`.",
            "Generate a unique and secure filename using `time()` and `random_bytes` to prevent overwrites and mitigate security risks.",
            "Perform a pre-flight check on the uploads directory for existence and writability.",
            "Usemove_uploaded_file()` for the final file operation.",
            "Return a structured JSON response `{ 'status': '...', 'message': '...' }` indicating the outcome."
          ]
        }
      ]
    },
    {
      "phase": 4,
      "phase_name": "Backend File Management (Unchanged)",
      "tasks": [
        {
          "task_id": "BE-02",
          "task_name": "Create File Listing Script",
          "target_file": "/file-handler/listFiles.php",
          "specifications": [
             "Use `scandir()` to list files.",
             "Iterate and filter results to exclude '.', '..', and `.htaccess`.",
             "For each valid file, generate an `<li>` element with an `<a>` tag.",
             "The `href` must point to `downloader.php` with a URL parameter (e.g., `downloader.php?file=...`).",
             "Escape all file name output with `htmlspecialchars()` to prevent XSS."
          ]
        },
        {
          "task_id": "BE-03",
          "task_name": "Create Secure Download Endpoint",
          "target_file": "/file-handler/downloader.php",
          "specifications": [
            "Validate `$_GET['file']` for existence and to prevent directory traversal attacks by comparing the input against its `basename()`.",
            "Construct an absolute file path and verify existence with `file_exists()`.",
            "Send appropriate HTTP headers (`Content-Type`, `Content-Disposition`, `Content-Length`, cache directives) to trigger a browser download.",
            "Use `readfile()` to stream the file content to the client."
          ]
        }
      ]
    },
    {
      "phase": 5,
      "phase_name": "Security Hardening (Unchanged)",
      "tasks": [
        {
          "task_id": "SEC-01",
          "task_name": "Secure the Uploads Directory",
          "target_file": "/file-handler/uploads/.htaccess",
          "specifications": [
             "Use a `<FilesMatch>` directive to match common script extensions.",
             "Apply `Deny from all` within the directive to prevent web-based execution of uploaded scripts."
          ]
        }
      ]
    }
  ]
}

{
  "version": "v2",
  "project_name": "PHP OOP MVC File Handler (Mobile-First)",
  "project_goal": "To re-architect the file handler application into a robust, secure, and maintainable object-oriented structure using the MVC (Model-View-Controller) pattern. The application will maintain its mobile-first, dependency-free frontend while leveraging a clear separation of concerns on the backend.",
  "tech_stack": [ "PHP 8+ (OOP)", "Vanilla JavaScript (ES6+)", "HTML5", "CSS3" ],
  "architecture_overview": "A front-controller pattern will be used. All HTTP requests will be routed through `public/index.php`. A simple router will dispatch requests to the appropriate Controller methods. The Controller will interact with the Model for data and business logic. The Model will handle all file system operations. The Controller will then pass data to the View, which is responsible solely for presentation.",
  "file_structure": [
    { "type": "directory", "path": "./", "name": "oop-file-handler" },
    { "type": "directory", "path": "./oop-file-handler/", "name": "app", "description": "Core application logic, resides outside the web root." },
    { "type": "directory", "path": "./oop-file-handler/app/", "name": "Controllers" },
    { "type": "directory", "path": "./oop-file-handler/app/", "name": "Models" },
    { "type": "directory", "path": "./oop-file-handler/app/", "name": "Views" },
    { "type": "directory", "path": "./oop-file-handler/app/", "name": "Core", "description": "Application bootstrap and routing." },
    { "type": "directory", "path": "./oop-file-handler/", "name": "public", "description": "The public web root. Only this directory is exposed to the web server." },
    { "type": "directory", "path": "./oop-file-handler/public/", "name": "css" },
    { "type": "directory", "path": "./oop-file-handler/public/", "name": "js" },
    { "type": "directory", "path": "./oop-file-handler/", "name": "uploads", "description": "Secure storage for all uploaded files. MUST be outside the public web root." },
    { "type": "file", "path": "./oop-file-handler/public/", "name": "index.php", "description": "The single entry point for all requests (Front Controller)." },
    { "type": "file", "path": "./oop-file-handler/public/", "name": ".htaccess", "description": "Redirects all requests to index.php." },
    { "type": "file", "path": "./oop-file-handler/public/css/", "name": "style.css" },
    { "type": "file", "path": "./oop-file-handler/public/js/", "name": "app.js" },
    { "type": "file", "path": "./oop-file-handler/app/Core/", "name": "Router.php" },
    { "type": "file", "path": "./oop-file-handler/app/Core/", "name": "Request.php" },
    { "type": "file", "path": "./oop-file-handler/app/Controllers/", "name": "PageController.php", "description": "Handles rendering of the main upload page." },
    { "type": "file", "path": "./oop-file-handler/app/Controllers/", "name": "UploadController.php", "description": "Handles API requests for file uploads." },
    { "type": "file", "path": "./oop-file-handler/app/Controllers/", "name": "DownloadController.php", "description": "Handles secure file download requests." },
    { "type": "file", "path": "./oop-file-handler/app/Models/", "name": "FileModel.php", "description": "Handles all business logic and interaction with the file system." },
    { "type": "file", "path": "./oop-file-handler/app/Views/", "name": "home.view.php", "description": "HTML template for the main page." }
  ],
  "implementation_plan": [
    {
      "phase": 1,
      "phase_name": "Application Core & Routing Setup",
      "tasks": [
        {
          "task_id": "CORE-01",
          "task_name": "Create Front Controller",
          "target_file": "/public/index.php",
          "specifications": [
            "Define a base path constant for the project root `__DIR__.'/../'`.",
            "Use `spl_autoload_register` to automatically load class files without manual `require` statements.",
            "Instantiate Core classes `Request` and `Router`.",
            "Define the application routes for GET '/', POST '/upload', and GET '/download'.",
            "Dispatch the request using the router, which will execute the appropriate controller method."
          ]
        },
        {
          "task_id": "CORE-02",
          "task_name": "Implement Rewriting Rule",
          "target_file": "/public/.htaccess",
          "specifications": [
            "Use `mod_rewrite` to redirect all requests for non-existent files or directories to `index.php`.",
            "Rule must correctly pass the original request URI to the front controller for routing."
          ]
        },
        {
          "task_id": "CORE-03",
          "task_name": "Build Router and Request Classes",
          "target_file": "/app/Core/",
          "specifications": [
            "**Request.php**: Create a class `Request` with methods to parse the request URI (`getUri()`) and the request method (`getMethod()`).",
            "**Router.php**: Create a class `Router` with methods to define routes (`get()`, `post()`) and a method to dispatch a request to a controller method (`dispatch($uri, $method)`). The router should handle basic '404 not found' scenarios."
          ]
        }
      ]
    },
    {
      "phase": 2,
      "phase_name": "Model: Business Logic and Data Handling",
      "tasks": [
        {
          "task_id": "MODEL-01",
          "task_name": "Develop the FileModel Class",
          "target_file": "/app/Models/FileModel.php",
          "description": "This class will encapsulate all interactions with the filesystem. It should be completely unaware of HTTP requests or responses.",
          "specifications": [
            "Define private properties for upload path, max file size, and allowed MIME types.",
            "Create a public method `getAllFiles()`: scans theuploads directory, filters out invalid entries ('.', '..'), and returns an array of valid filenames.",
            "Create a public method `saveFile(array $fileData)`: Takes the `$_FILES['userfile']` array as an argument. This method will contain all validation logic from the original procedural script (checking `error` key, size, and true MIME type via `finfo`). If validation passes, it generates a secure, unique filename and uses `move_uploaded_file()`. Returns an associative array indicating status, e.g., `['status' => 'success', 'message' => '...']` or `['status' => 'error', 'message' => '...']`.",
            "Create a public method `getFilePath(string $filename)`: Takes a filename as input. Performs a security check to prevent directory traversal (`basename`). If the file exists and is valid, returns its full, absolute server path. Otherwise, returns `false`."
          ]
        }
      ]
    },
    {
      "phase": 3,
      "phase_name": "Controllers: The Application Glue",
      "tasks": [
        {
          "task_id": "CTRL-01",
          "task_name": "Implement the PageController",
          "target_file": "/app/Controllers/PageController.php",
          "specifications": [
            "Create a class `PageController`.",
            "Create a public method `showHomePage()`: This method will instantiate `FileModel`, call its `getAllFiles()` method to get the list of files, and then include/require the `home.view.php` template, passing the files array to it."
          ]
        },
        {
          "task_id": "CTRL-02",
          "task_name": "Implement the UploadController",
          "target_file": "/app/Controllers/UploadController.php",
          "specifications": [
            "Create a class `UploadController`.",
            "Create a public method `handleUpload()`: Check that `$_FILES['userfile']` is set. Instantiate `FileModel` and call `$fileModel->saveFile($_FILES['userfile'])`. Set the `Content-Type: application/json` header, `json_encode()` the result array from the model, echo it, and then `exit()`."
          ]
        },
        {
          "task_id": "CTRL-03",
          "task_name": "Implement the DownloadController",
          "target_file": "/app/Controllers/DownloadController.php",
          "specifications": [
            "Create a class `DownloadController`.",
            "Create a public method `serveFile()`: Get the filename from `$_GET['file']`. Instantiate `FileModel` and call `$fileModel->getFilePath(...)`. If a valid path is returned, the Controller sets all necessary download headers (`Content-Type`, `Content-Disposition`, etc.) and streams the file with `readfile()`. If the method returns false, the Controller sets a `404 Not Found` HTTP status code and displays an error."
          ]
        }
      ]
    },
    {
      "phase": 4,
      "phase_name": "View: The Presentation Layer",
      "tasks": [
        {
          "task_id": "VIEW-01",
          "task_name": "Create the Home View Template",
          "target_file": "/app/Views/home.view.php",
          "specifications": [
            "This file will contain the complete HTML structure from the original `index.php`.",
            "It will link stylesheets and scripts to their new paths, e.g., `/css/style.css` and `/js/app.js`.",
            "Instead of a PHP include for the file list, it will contain a `foreach` loop that iterates over the `$files` array (passed from the `PageController`) and generates the `<li><a>...</a></li>` elements for each file.",
            "The download link `href` attribute will point to the new route: `/download?file=...`"
          ]
        }
      ]
    },
    {
      "phase": 5,
      "phase_name": "Frontend Assets Migration",
      "tasks": [
        {
          "task_id": "FE-ASSET-01",
          "task_name": "Adapt Client-Side JavaScript",
          "target_file": "/public/js/app.js",
          "specifications": [
            "The client-side JavaScript logic remains largely the same.",
            "The critical change is to update the URL in the `fetch()` API call from 'uploader.php' to the new router endpoint, `'/upload'`, which corresponds to the route defined in `/public/index.php`."
          ]
        },
        {
          "task_id": "FE-ASSET-02",
          "task_name": "Migrate Stylesheet",
          "target_file": "/public/css/style.css",
          "specifications": [
            "Move the existing `style.css` file to this new location without any internal changes. The view links to it from the web root."
          ]
        }
       ]
    }
  ]
}
