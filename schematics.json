{
  "version": "v3",
  "project_name": "PHP Advanced MVC File Handler",
  "project_goal": "To create a highly structured, secure, and configurable file handler application using an advanced MVC pattern. The goal is to maximize maintainability and portability by externalizing configuration and implementing robust error handling, while retaining a dependency-free, mobile-first frontend.",
  "tech_stack": [ "PHP 8+ (OOP)", "Vanilla JavaScript (ES6+)", "HTML5", "CSS3" ],
  "architecture_overview": "The application uses a front-controller pattern (`public/index.php`) to route all requests. A centralized configuration (`config/config.php`) is loaded into a simple application container (`src/Core/App.php`). The container manages dependencies and application state. A router dispatches requests to Controller methods. Controllers interact with the Model for business logic (e.g., file operations), and then pass data to a View for rendering. This ensures a strict separation of concerns, enhances security by keeping core logic and sensitive files outside the webroot, and improves maintainability through configuration.",
  "file_structure": [
    { "type": "directory", "path": "./", "name": "advanced-file-handler" },
    { "type": "directory", "path": "./advanced-file-handler/", "name": "config", "description": "Contains all application configuration files." },
    { "type": "directory", "path": "./advanced-file-handler/", "name": "public", "description": "The public web root. Only this directory is exposed." },
    { "type": "directory", "path": "./advanced-file-handler/", "name": "src", "description": "Core application source code (logic, controllers, models)." },
    { "type": "directory", "path": "./advanced-file-handler/", "name": "uploads", "description": "Secure storage for uploaded files. MUST be outside the public web root." },

    { "type": "file", "path": "./advanced-file-handler/config/", "name": "config.php", "description": "Returns an array of application settings." },

    { "type": "file", "path": "./advanced-file-handler/public/", "name": "index.php", "description": "The single entry point (Front Controller)." },
    { "type": "file", "path": "./advanced-file-handler/public/", "name": ".htaccess", "description": "Redirects all requests to index.php." },
    { "type": "directory", "path": "./advanced-file-handler/public/", "name": "css" },
    { "type": "file", "path": "./advanced-file-handler/public/css/", "name": "style.css" },
    { "type": "directory", "path": "./advanced-file-handler/public/", "name": "js" },
    { "type": "file", "path": "./advanced-file-handler/public/js/", "name": "app.js" },

    { "type": "directory", "path": "./advanced-file-handler/src/", "name": "Core" },
    { "type": "file", "path": "./advanced-file-handler/src/Core/", "name": "App.php", "description": "A simple service container for managing dependencies and config." },
    { "type": "file", "path": "./advanced-file-handler/src/Core/", "name": "Router.php" },
    { "type": "file", "path": "./advanced-file-handler/src/Core/", "name": "Request.php" },

    { "type": "directory", "path": "./advanced-file-handler/src/", "name": "Controllers" },
    { "type": "file", "path": "./advanced-file-handler/src/Controllers/", "name": "HomeController.php", "description": "Handles rendering of the main page." },
    { "type": "file", "path": "./advanced-file-handler/src/Controllers/", "name": "FileController.php", "description": "Handles file uploads and downloads." },
    { "type": "file", "path": "./advanced-file-handler/src/Controllers/", "name": "ErrorController.php", "description": "Handles 404 and other errors." },

    { "type": "directory", "path": "./advanced-file-handler/src/", "name": "Models" },
    { "type": "file", "path": "./advanced-file-handler/src/Models/", "name": "FileModel.php", "description": "Handles all business logic for file system interaction." },

    { "type": "directory", "path": "./advanced-file-handler/src/", "name": "Views" },
    { "type": "file", "path": "./advanced-file-handler/src/Views/", "name": "home.view.php", "description": "HTML template for the main page." },
    { "type": "file", "path": "./advanced-file-handler/src/Views/", "name": "errors/404.view.php", "description": "HTML template for 404 Not Found errors." }
  ],
  "implementation_plan": [
    {
      "phase": 1,
      "phase_name": "Core Application Setup and Configuration",
      "tasks": [
        {
          "task_id": "CORE-01",
          "task_name": "Create Configuration File",
          "target_file": "/config/config.php",
          "specifications": [
            "This file MUST return a PHP array.",
            "Define keys for 'uploads_directory', 'max_file_size', and 'allowed_mime_types'."
          ]
        },
        {
          "task_id": "CORE-02",
          "task_name": "Create Front Controller",
          "target_file": "/public/index.php",
          "specifications": [
            "Define a `BASE_PATH` constant.",
            "Use `spl_autoload_register` for class autoloading from the `src` directory.",
            "Load the configuration file.",
            "Bind the configuration array to the App container: `App::bind('config', require BASE_PATH . 'config/config.php');`",
            "Instantiate the router, define routes, and dispatch the request."
          ]
        },
        {
          "task_id": "CORE-03",
          "task_name": "Implement App Container",
          "target_file": "/src/Core/App.php",
          "specifications": [
            "Create a class `App` with a static associative array `$registry`.",
            "Create a static method `bind($key, $value)` to add items to the registry.",
            "Create a static method `get($key)` to retrieve items from the registry. It should throw an exception if the key is not found."
          ]
        },
        {
          "task_id": "CORE-04",
          "task_name": "Build Router and Request Classes",
          "target_file": "/src/Core/",
          "specifications": [
            "**Request.php**: Unchanged from v2.",
            "**Router.php**: Update the `dispatch` method. If a route is not found, it should call the `ErrorController`'s `notFound` method."
          ]
        },
        {
            "task_id": "CORE-05",
            "task_name": "Implement Rewriting Rule",
            "target_file": "/public/.htaccess",
            "specifications": [ "Unchanged from v2. Use `mod_rewrite` to redirect all requests to `index.php`." ]
        }
      ]
    },
    {
      "phase": 2,
      "phase_name": "Model: Configurable Business Logic",
      "tasks": [
        {
          "task_id": "MODEL-01",
          "task_name": "Develop the FileModel Class",
          "target_file": "/src/Models/FileModel.php",
          "specifications": [
            "The class must retain all core methods from the v2 design: `getAllFiles()`, `saveFile(array $fileData)`, and `getFilePath(string $filename)`.",
            "The constructor `__construct()` should accept no arguments.",
            "Remove hardcoded configuration properties; methods should retrieve configuration values from the App container, e.g., `App::get('config')['uploads_directory']`."
          ]
        }
      ]
    },
    {
      "phase": 3,
      "phase_name": "Controllers: Application Flow Control",
      "tasks": [
        {
          "task_id": "CTRL-01",
          "task_name": "Implement the HomeController",
          "target_file": "/src/Controllers/HomeController.php",
          "specifications": [
            "Create a public method `show()`.",
            "It should instantiate `FileModel`, get the list of files, and pass them to the `home.view.php` template."
          ]
        },
        {
          "task_id": "CTRL-02",
          "task_name": "Implement the FileController",
          "target_file": "/src/Controllers/FileController.php",
          "specifications": [
            "Create a public method `upload()`: This will contain the logic from the v2 `UploadController`. It will instantiate `FileModel` and call its `saveFile()` method.",
            "Create a public method `download()`: This will contain the logic from the v2 `DownloadController`. It will use the `FileModel` to securely fetch the file path and stream the download."
          ]
        },
        {
          "task_id": "CTRL-03",
          "task_name": "Implement the ErrorController",
          "target_file": "/src/Controllers/ErrorController.php",
          "specifications": [
            "Create a public method `notFound()`.",
            "This method should set the HTTP response code to 404 using `http_response_code(404)`.",
            "It should then load the `errors/404.view.php` template."
          ]
        }
      ]
    },
    {
      "phase": 4,
      "phase_name": "View: The Presentation Layer",
      "tasks": [
        {
          "task_id": "VIEW-01",
          "task_name": "Create the Home and Error View Templates",
          "target_file": "/src/Views/",
          "specifications": [
            "**home.view.php**: This file must contain the complete HTML structure as defined in the v1 schematic (including `drop-zone`, `preview-container`, etc.) and use the specified mobile-first CSS classes. Links to assets must be root-relative (e.g., `/css/style.css`). The upload form `action` should point to the `/upload` route, and download links to `/download?file=...`.",
            "**errors/404.view.php**: A simple HTML page with a '404 - Page Not Found' message."
          ]
        }
      ]
    },
    {
      "phase": 5,
      "phase_name": "Frontend Assets Migration",
      "tasks": [
        {
          "task_id": "FE-ASSET-01",
          "task_name": "Adapt Client-Side JavaScript",
          "target_file": "/public/js/app.js",
          "specifications": [
            "The `fetch()` API call must be updated to point to the new upload route, e.g., `'/upload'`."
          ]
        },
        {
          "task_id": "FE-ASSET-02",
          "task_name": "Migrate Stylesheet",
          "target_file": "/public/css/style.css",
          "specifications": [
            "Move the existing `style.css` file to this new location.",
            "The styling logic itself, being mobile-first and utility-based, requires no internal changes."
          ]
        }
       ]
    }
  ]
}
